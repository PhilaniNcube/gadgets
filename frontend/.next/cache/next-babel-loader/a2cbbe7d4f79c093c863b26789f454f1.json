{"ast":null,"code":"import { PAGINATION_QUERY } from '../components/Pagination';\nexport default function paginationField() {\n  return {\n    keyArgs: false,\n    // Tels apollo we will take care of everything\n    read: function read() {\n      var _data$_allProductsMet;\n\n      var existing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      var _ref = arguments.length > 1 ? arguments[1] : undefined,\n          args = _ref.args,\n          cache = _ref.cache;\n\n      console.log({\n        existing: existing,\n        args: args,\n        cache: cache\n      });\n      var skip = args.skip,\n          first = args.first; // Read the number of items on the page from the cache\n\n      var data = cache.readQuery({\n        query: PAGINATION_QUERY\n      });\n      console.log(data);\n      var count = data === null || data === void 0 ? void 0 : (_data$_allProductsMet = data._allProductsMeta) === null || _data$_allProductsMet === void 0 ? void 0 : _data$_allProductsMet.count;\n      var page = skip / first + 1;\n      var pages = Math.ceil(count / first); // Check if we have existing items\n\n      var items = existing.slice(skip, skip + first).filter(function (x) {\n        return x;\n      }); // First thing it does is it asks the read function for those items\n      // We can either do one of 2 things:\n      // First thing we can do is return the items because they are already in the cache\n      // The other thing we can do is to return false from here and send a network request\n    },\n    merge: function merge() {// this runs when the apollo client comes back from the network with our products\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/Philani/Desktop/graph/sick-fits/frontend/lib/paginationField.js"],"names":["PAGINATION_QUERY","paginationField","keyArgs","read","existing","args","cache","console","log","skip","first","data","readQuery","query","count","_allProductsMeta","page","pages","Math","ceil","items","slice","filter","x","merge"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,0BAAjC;AAEA,eAAe,SAASC,eAAT,GAA2B;AACxC,SAAO;AACLC,IAAAA,OAAO,EAAE,KADJ;AACW;AAChBC,IAAAA,IAFK,kBAEgC;AAAA;;AAAA,UAAhCC,QAAgC,uEAArB,EAAqB;;AAAA;AAAA,UAAfC,IAAe,QAAfA,IAAe;AAAA,UAATC,KAAS,QAATA,KAAS;;AACnCC,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAEJ,QAAAA,QAAQ,EAARA,QAAF;AAAYC,QAAAA,IAAI,EAAJA,IAAZ;AAAkBC,QAAAA,KAAK,EAALA;AAAlB,OAAZ;AADmC,UAE3BG,IAF2B,GAEXJ,IAFW,CAE3BI,IAF2B;AAAA,UAErBC,KAFqB,GAEXL,IAFW,CAErBK,KAFqB,EAInC;;AACA,UAAMC,IAAI,GAAGL,KAAK,CAACM,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEb;AAAT,OAAhB,CAAb;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAYG,IAAZ;AAEA,UAAMG,KAAK,GAAGH,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEI,gBAAT,0DAAG,sBAAwBD,KAAtC;AACA,UAAME,IAAI,GAAGP,IAAI,GAAGC,KAAP,GAAe,CAA5B;AACA,UAAMO,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,GAAGJ,KAAlB,CAAd,CAVmC,CAYnC;;AACA,UAAMU,KAAK,GAAGhB,QAAQ,CAACiB,KAAT,CAAeZ,IAAf,EAAqBA,IAAI,GAAGC,KAA5B,EAAmCY,MAAnC,CAA0C,UAACC,CAAD;AAAA,eAAOA,CAAP;AAAA,OAA1C,CAAd,CAbmC,CAcnC;AACA;AACA;AACA;AACD,KApBI;AAqBLC,IAAAA,KArBK,mBAqBG,CACN;AACD;AAvBI,GAAP;AAyBD","sourcesContent":["import { PAGINATION_QUERY } from '../components/Pagination';\n\nexport default function paginationField() {\n  return {\n    keyArgs: false, // Tels apollo we will take care of everything\n    read(existing = [], { args, cache }) {\n      console.log({ existing, args, cache });\n      const { skip, first } = args;\n\n      // Read the number of items on the page from the cache\n      const data = cache.readQuery({ query: PAGINATION_QUERY });\n      console.log(data);\n\n      const count = data?._allProductsMeta?.count;\n      const page = skip / first + 1;\n      const pages = Math.ceil(count / first);\n\n      // Check if we have existing items\n      const items = existing.slice(skip, skip + first).filter((x) => x);\n      // First thing it does is it asks the read function for those items\n      // We can either do one of 2 things:\n      // First thing we can do is return the items because they are already in the cache\n      // The other thing we can do is to return false from here and send a network request\n    },\n    merge() {\n      // this runs when the apollo client comes back from the network with our products\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}