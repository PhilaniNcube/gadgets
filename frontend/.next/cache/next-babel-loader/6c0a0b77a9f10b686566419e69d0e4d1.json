{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Philani\\\\Desktop\\\\graph\\\\sick-fits\\\\frontend\\\\components\\\\UpdateProduct.js\";\n\n/* eslint-disable react/prop-types */\nimport { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nconst SINGLE_PRODUCT_QUERY = gql`\n  query SINGLE_PRODUCT_QUERY($id: ID!) {\n    Product(where: { id: $id }) {\n      id\n      name\n      description\n      price\n    }\n  }\n`;\nconst UPDATE_PRODUCT_MUTATION = gql`\n  mutation UPDATE_PRODUCT_MUTATION(\n    $id: ID!\n    $name: String\n    $description: String\n    $price: Int\n  ) {\n    updateProduct(\n      id: $id\n      data: { name: $name, description: $description, price: $price }\n    ) {\n      id\n      name\n      description\n      price\n    }\n  }\n`;\n\nconst UpdateProduct = ({\n  id\n}) => {\n  // 1. We need to get the existing product\n  const {\n    data,\n    error,\n    loading\n  } = useQuery(SINGLE_PRODUCT_QUERY, {\n    variables: {\n      id\n    }\n  });\n  console.log(data); // 2. We need to get the mutation to update the product\n  // 3. We need the form to handle the updat\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Update \", id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\nexport default UpdateProduct;","map":{"version":3,"sources":["C:/Users/Philani/Desktop/graph/sick-fits/frontend/components/UpdateProduct.js"],"names":["useQuery","gql","SINGLE_PRODUCT_QUERY","UPDATE_PRODUCT_MUTATION","UpdateProduct","id","data","error","loading","variables","console","log"],"mappings":";;;AAAA;AACA,SAASA,QAAT,QAAyB,gBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,MAAMC,oBAAoB,GAAGD,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATA;AAWA,MAAME,uBAAuB,GAAGF,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAjBA;;AAmBA,MAAMG,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAY;AAChC;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA2BR,QAAQ,CAACE,oBAAD,EAAuB;AAC9DO,IAAAA,SAAS,EAAE;AAAEJ,MAAAA;AAAF;AADmD,GAAvB,CAAzC;AAIAK,EAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ,EANgC,CAQhC;AAEA;;AACA,sBACE;AAAA,2BACE;AAAA,4BAAWD,EAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAhBD;;AAiBA,eAAeD,aAAf","sourcesContent":["/* eslint-disable react/prop-types */\r\nimport { useQuery } from '@apollo/client';\r\nimport gql from 'graphql-tag';\r\n\r\nconst SINGLE_PRODUCT_QUERY = gql`\r\n  query SINGLE_PRODUCT_QUERY($id: ID!) {\r\n    Product(where: { id: $id }) {\r\n      id\r\n      name\r\n      description\r\n      price\r\n    }\r\n  }\r\n`;\r\n\r\nconst UPDATE_PRODUCT_MUTATION = gql`\r\n  mutation UPDATE_PRODUCT_MUTATION(\r\n    $id: ID!\r\n    $name: String\r\n    $description: String\r\n    $price: Int\r\n  ) {\r\n    updateProduct(\r\n      id: $id\r\n      data: { name: $name, description: $description, price: $price }\r\n    ) {\r\n      id\r\n      name\r\n      description\r\n      price\r\n    }\r\n  }\r\n`;\r\n\r\nconst UpdateProduct = ({ id }) => {\r\n  // 1. We need to get the existing product\r\n  const { data, error, loading } = useQuery(SINGLE_PRODUCT_QUERY, {\r\n    variables: { id },\r\n  });\r\n\r\n  console.log(data);\r\n\r\n  // 2. We need to get the mutation to update the product\r\n\r\n  // 3. We need the form to handle the updat\r\n  return (\r\n    <div>\r\n      <p>Update {id}</p>\r\n    </div>\r\n  );\r\n};\r\nexport default UpdateProduct;\r\n"]},"metadata":{},"sourceType":"module"}