{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Philani\\\\Desktop\\\\graph\\\\capegadgets\\\\frontend\\\\components\\\\Checkout.js\";\nimport styled from 'styled-components';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { CardElement, Elements, useElements, useStripe } from '@stripe/react-stripe-js';\nimport { useState } from 'react';\nimport nProgress from 'nprogress';\nimport gql from 'graphql-tag';\nimport SickButton from './styles/SickButton';\nconst CheckOutFormStyles = styled.form.withConfig({\n  displayName: \"Checkout__CheckOutFormStyles\",\n  componentId: \"sc-10mtoy5-0\"\n})([\"box-shadow:0 1px 2px 2px rgba(0,0,0,0.04);border:1px solid rgba(0,0,0,0.06);border-radius:5px;display:grid;grid-gap:10px;color:black;\"]);\nconst CREATE_ORDER_MUTATION = gql`\n  mutation CREATE_ORDER_MUTATION($token: String!) {\n    checkout(token: $token) {\n      id\n      charge\n      total\n      items {\n        id\n        name\n      }\n    }\n  }\n`; // eslint-disable-next-line no-undef\n\nconst stripeLib = loadStripe(process.env.NEXT_PUBLIC_STRIPE_KEY);\n\nfunction CheckoutForm() {\n  const {\n    0: error,\n    1: setError\n  } = useState();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const stripe = useStripe();\n  const elements = useElements();\n\n  async function handleSubmit(e) {\n    // 1. Stop the form from submiting and turn the loader on\n    e.preventDefault();\n    console.log('we have to do some work');\n    setLoading(true); // 2. Start the page transition\n\n    nProgress.start(); // 3. Create the payment method from stripe (Token comes back here if successful)\n\n    const {\n      error,\n      paymentMethod\n    } = await stripe.createPaymentMethod({\n      type: 'card',\n      card: elements.getElement(CardElement)\n    });\n    console.log(paymentMethod); // 4. Handle any errors from stripe\n\n    if (error) {\n      setError(error);\n    } // 5. Send the token from step 3 to our keystone server via custom mutation\n    // 6. Change the page to view the order\n    // 7. Close the cart\n    // 8. Turn the loader off\n\n\n    setLoading(false);\n    nProgress.done();\n  }\n\n  return /*#__PURE__*/_jsxDEV(CheckOutFormStyles, {\n    onSubmit: handleSubmit,\n    children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        fontSize: 12\n      },\n      children: error.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(CardElement, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SickButton, {\n      children: \"Check Out Now\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n\nfunction Checkout() {\n  return /*#__PURE__*/_jsxDEV(Elements, {\n    stripe: stripeLib,\n    children: /*#__PURE__*/_jsxDEV(CheckoutForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n\nexport default Checkout;","map":{"version":3,"sources":["C:/Users/Philani/Desktop/graph/capegadgets/frontend/components/Checkout.js"],"names":["styled","loadStripe","CardElement","Elements","useElements","useStripe","useState","nProgress","gql","SickButton","CheckOutFormStyles","form","CREATE_ORDER_MUTATION","stripeLib","process","env","NEXT_PUBLIC_STRIPE_KEY","CheckoutForm","error","setError","loading","setLoading","stripe","elements","handleSubmit","e","preventDefault","console","log","start","paymentMethod","createPaymentMethod","type","card","getElement","done","fontSize","message","Checkout"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,mBAAnB;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,SACEC,WADF,EAEEC,QAFF,EAGEC,WAHF,EAIEC,SAJF,QAKO,yBALP;AAMA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AAEA,MAAMC,kBAAkB,GAAGV,MAAM,CAACW,IAAV;AAAA;AAAA;AAAA,6IAAxB;AASA,MAAMC,qBAAqB,GAAGJ,GAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAZA,C,CAcA;;AACA,MAAMK,SAAS,GAAGZ,UAAU,CAACa,OAAO,CAACC,GAAR,CAAYC,sBAAb,CAA5B;;AAEA,SAASC,YAAT,GAAwB;AACtB,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBb,QAAQ,EAAlC;AACA,QAAM;AAAA,OAACc,OAAD;AAAA,OAAUC;AAAV,MAAwBf,QAAQ,CAAC,KAAD,CAAtC;AAEA,QAAMgB,MAAM,GAAGjB,SAAS,EAAxB;AACA,QAAMkB,QAAQ,GAAGnB,WAAW,EAA5B;;AAEA,iBAAeoB,YAAf,CAA4BC,CAA5B,EAA+B;AAC7B;AACAA,IAAAA,CAAC,CAACC,cAAF;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAP,IAAAA,UAAU,CAAC,IAAD,CAAV,CAJ6B,CAM7B;;AACAd,IAAAA,SAAS,CAACsB,KAAV,GAP6B,CAS7B;;AACA,UAAM;AAAEX,MAAAA,KAAF;AAASY,MAAAA;AAAT,QAA2B,MAAMR,MAAM,CAACS,mBAAP,CAA2B;AAChEC,MAAAA,IAAI,EAAE,MAD0D;AAEhEC,MAAAA,IAAI,EAAEV,QAAQ,CAACW,UAAT,CAAoBhC,WAApB;AAF0D,KAA3B,CAAvC;AAIAyB,IAAAA,OAAO,CAACC,GAAR,CAAYE,aAAZ,EAd6B,CAgB7B;;AACA,QAAIZ,KAAJ,EAAW;AACTC,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,KAnB4B,CAqB7B;AAEA;AAEA;AAEA;;;AACAG,IAAAA,UAAU,CAAC,KAAD,CAAV;AACAd,IAAAA,SAAS,CAAC4B,IAAV;AACD;;AAED,sBACE,QAAC,kBAAD;AAAoB,IAAA,QAAQ,EAAEX,YAA9B;AAAA,eACGN,KAAK,iBAAI;AAAG,MAAA,KAAK,EAAE;AAAEkB,QAAAA,QAAQ,EAAE;AAAZ,OAAV;AAAA,gBAA6BlB,KAAK,CAACmB;AAAnC;AAAA;AAAA;AAAA;AAAA,YADZ,eAEE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YAFF,eAIE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;AAED,SAASC,QAAT,GAAoB;AAClB,sBACE,QAAC,QAAD;AAAU,IAAA,MAAM,EAAEzB,SAAlB;AAAA,2BACE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;AAED,eAAeyB,QAAf","sourcesContent":["import styled from 'styled-components';\r\nimport { loadStripe } from '@stripe/stripe-js';\r\nimport {\r\n  CardElement,\r\n  Elements,\r\n  useElements,\r\n  useStripe,\r\n} from '@stripe/react-stripe-js';\r\nimport { useState } from 'react';\r\nimport nProgress from 'nprogress';\r\nimport gql from 'graphql-tag';\r\nimport SickButton from './styles/SickButton';\r\n\r\nconst CheckOutFormStyles = styled.form`\r\n  box-shadow: 0 1px 2px 2px rgba(0, 0, 0, 0.04);\r\n  border: 1px solid rgba(0, 0, 0, 0.06);\r\n  border-radius: 5px;\r\n  display: grid;\r\n  grid-gap: 10px;\r\n  color: black;\r\n`;\r\n\r\nconst CREATE_ORDER_MUTATION = gql`\r\n  mutation CREATE_ORDER_MUTATION($token: String!) {\r\n    checkout(token: $token) {\r\n      id\r\n      charge\r\n      total\r\n      items {\r\n        id\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n// eslint-disable-next-line no-undef\r\nconst stripeLib = loadStripe(process.env.NEXT_PUBLIC_STRIPE_KEY);\r\n\r\nfunction CheckoutForm() {\r\n  const [error, setError] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n\r\n  async function handleSubmit(e) {\r\n    // 1. Stop the form from submiting and turn the loader on\r\n    e.preventDefault();\r\n    console.log('we have to do some work');\r\n    setLoading(true);\r\n\r\n    // 2. Start the page transition\r\n    nProgress.start();\r\n\r\n    // 3. Create the payment method from stripe (Token comes back here if successful)\r\n    const { error, paymentMethod } = await stripe.createPaymentMethod({\r\n      type: 'card',\r\n      card: elements.getElement(CardElement),\r\n    });\r\n    console.log(paymentMethod);\r\n\r\n    // 4. Handle any errors from stripe\r\n    if (error) {\r\n      setError(error);\r\n    }\r\n\r\n    // 5. Send the token from step 3 to our keystone server via custom mutation\r\n\r\n    // 6. Change the page to view the order\r\n\r\n    // 7. Close the cart\r\n\r\n    // 8. Turn the loader off\r\n    setLoading(false);\r\n    nProgress.done();\r\n  }\r\n\r\n  return (\r\n    <CheckOutFormStyles onSubmit={handleSubmit}>\r\n      {error && <p style={{ fontSize: 12 }}>{error.message}</p>}\r\n      <CardElement />\r\n\r\n      <SickButton>Check Out Now</SickButton>\r\n    </CheckOutFormStyles>\r\n  );\r\n}\r\n\r\nfunction Checkout() {\r\n  return (\r\n    <Elements stripe={stripeLib}>\r\n      <CheckoutForm />\r\n    </Elements>\r\n  );\r\n}\r\n\r\nexport default Checkout;\r\n"]},"metadata":{},"sourceType":"module"}